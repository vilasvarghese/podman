4. Explain podmanfile

	FROM, RUN, ADD, COPY, Expose, ENV, CMD, Entrypoint
	
	###############################################################
	1. FROM
	
		podman build -t from .
		podman run -it from bash
		
		Execute the podmanfile1
		 

	2. RUN
		
		podman build -t run-ex -f 2.Runfile .
		podman run -it run-ex bash
			-> javac

	3. CMD
			-> podman build -t cmd-test -f 3.cmdpodmanfile  .
			-> podman run cmd-test #ping might fail
			-> podman run cmd-test ping google.com
			-> podman run -it cmd-test ls -ltr # we can override the instruction.

	4. ENTRYPOINT
	
		    ENTRYPOINT ["<executable>", "<param1>", "<param2>"] (exec form, preferred)
		    ENTRYPOINT <command> <param1> <param2> (shell form)
		    

	x. ENV
	
		podman build -t env -f 6.envpodmanfile .
		podman run -it env bash

	6. COPY
		
		podman build -t "tag" -f <file> .
		podman run <image>

	7. ADD

		Usage:
		podman build -t "tag" -f <file> .
		podman run <image>
    	
	8. MAINTAINER
		The MAINTAINER instruction allows you to set the Author field of the generated images.

	9. EXPOSE

		Usage:
		    EXPOSE <port> [<port> ...]

		    Informs podman that the container listens on the specified network port(s) at runtime.
		    EXPOSE does not make the ports of the container accessible to the host.

	10. VOLUME

		Usage:
		    VOLUME ["<path>", ...]
		    VOLUME <path> [<path> ...]

		Creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers. 


	11. USER

		podman build -t user-eg -f 8.userpodmanfile .
		podman run -it user-eg bash
			-> whoami
			
			
		Usage:
		    USER <username | UID>

	12. WORKDIR

		Usage:
		    WORKDIR </path/to/workdir>

	13. ARG

		Usage:
			ARG <name>[=<default value>]
	14. ONBUILD

		Usage:

		    ONBUILD <podmanfile INSTRUCTION>

	15. STOPSIGNAL

		Usage:
		    STOPSIGNAL <signal>


	16. HEALTHCHECK

		Usage:


	17. SHELL

		Usage:

		    SHELL ["<executable>", "<param1>", "<param2>"]

https://kapeli.com/cheat_sheets/podmanfile.docset/Contents/Resources/Documents/index
##################################################################################


May be start with 
	FROM Ubuntu
	RUN apt-get update
	RUN apt-get install -y apache2
	
add	
	COPY hello /var/www/html
	
add 
	EXPOSE 80

add
	ENTRYPOINT ["apache2ctl"]

add
	CMD ["-D FOREGROUND"]

####################################################################

Volumes
#####################################################

Mysql example
	
	Can be created using
	1. -v or --volume. 
	-v <vol name>:<directory mounted>:<comma seperated list of options>
	



	podman volume --help
	podman volume ls

	
	-v or --volume
	
	
	Volume create instructions
	--------------------------
	
	1. podman volume create my-vol
	2. podman volume ls
	3. podman volume inspect my-vol
	4. podman volume rm my-vol
	
	For the rest in general you can do it 2 ways
	1. Using -v or --volume 
	2. Using --mount : More descriptive
	
	1. While creating container - create a named volume
		a. Using --mount
		
		podman run -d  --name devtest  --mount source=<vol name>,target=/app nginx:latest
	
		podman volume inspect <vol name>
		find the path on host
		
		podman run -it <container id> bash
		make changes and see it can be observed.
	
		b. Using -v
		podman run -d --name devtest -v 
		myvol2:/app nginx:latest
		
	clean up the env.	
		podman container stop <id>
		podman rm <id>
		podman volume rm <volume name>
		
	2. Populate a volume from container.
		/usr/share/nginx/html is the directory to stop html content in nginx. This has default files
		
		a. --mount
		podman run -d --name=nginxtest --mount source=<volume name>,destination=/usr/share/nginx/html nginx:latest
  
		b. -v
		podman run -d --name=nginxtest -v nginx-vol:/usr/share/nginx/html nginx:latest
		
		Cleanup
		podman container stop <id>
		podman container rm <id>
		podman volume rm nginx-vol
		
	3. Creating a read only volume
	
		a. --mount
		podman run -d --name=nginxtest --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly nginx:latest
		
		
		b. -v (Use ro)
		podman run -d --name=nginxtest -v nginx-vol:/usr/share/nginx/html:ro nginx:latest
		
		podman volume inspect <id>
		go to the container 
			cd /usr/share/nginx/html
			echo test > test.html
				#Error - readonly file system
		got to the host
		find the location - cd to the location
		echo test > test.html # no error.
		
		podman stop <id>
		podman rm <id>
		
		podman run -it -v sshvolume:/data -p 9002:80 nginx # this is however failing investigate more.
		
	4. Taking a backup.
		For example if you have a container like the below
		podman run -it -v /dbdata --name dbstore ubuntu /bin/bash
		
		Then you can create a container just for taking back up as below
		podman run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
		
		above command is doing the following 
		1. Taking a volume from the first container.
		2. Creating a new volume where it is creating a backup.tar of /dbdata
		
	4b. Restoring from backup.
		Create a new container instruction very similar to 4a.
		podman run -it -v /dbdata --name dbstore2 ubuntu /bin/bash
		
		un-tar the backup file in the new container`s data volume:
		
		podman run --rm --volumes-from dbstore2 -v xyz:/persist ubuntu bash -c "cd /persist && tar xvf backup.tar --strip 1"
		
		--rm will remove the container when it stops.
		
		
	Bind Mount execute instructions.
	--------------------------------

	1. Start a container with Bind Mount
	
	Using --mount
	podman run -d -it --name devtest --mount type=bind,source="$(pwd)"/target1,target=/app nginx:latest
	#does that fail. Create the folder and try again.
	
	
	Using -v #N.B : There is not type here. So you should be intelligent to distinguish.
	
	podman run -d -it --name devtest -v "$(pwd)"/target:/app  nginx:latest
	
	2. Read only bind mount
	
	--mount
	podman run -d -it--name devtest --mount type=bind,source="$(pwd)"/target,target=/app,readonly nginx:latest
	
	-v
	podman run -d -it --name devtest -v "$(pwd)"/target:/app:ro nginx:latest
	
	in the container try to add a file/directory in /app # it fails
	in the host add a directory in "target" folder 
		#it works and changes are visible inside container.
		
	
	tmpfs create instructions
	--------------------------
	There are two ways to create
	1. --tmpfs : Does not support any configurable options
	2. --mount : 
		Consists of key:value pair.
			a. type=tmpfs #other options are volume and bind
			b. destination/dst/target - where it should mounted in the container
			c. tmpfs-size/tmpfs-mode : 
				tmpfs-size : size of the tmpfs 
				tmpfs-mode : mode of file system in octal.
					default 1777 world writable
							1xxx
	
	
		podman run -d -it --name tmptest --mount type=tmpfs,destination=/app,tmpfs-mode=1770 nginx:latest	
	
	
	Backup and Restore
	------------------
	
		1. podman run -it -v /persist --name ubcnt1 ubuntu /bin/bash
		
		Then you can create a container just for taking back up as below
		2. podman run --rm --volumes-from ubcnt1 -v xyz1:/backup ubuntu tar cvf /backup/backup.tar /persist
		
		podman run --rm  --volumes-from ubcnt1 -v xyz1:/backup ubuntu tar cvf /backup/backup.tar /persist
		
		
	4b. Restoring from backup.
		Create a new container instruction very similar to 4a.
		3. podman run -it -v /persist --name ubcnt2 ubuntu /bin/bash
		
		un-tar the backup file in the new container`s data volume:
		
		4. podman run --rm --volumes-from ubcnt2 -v xyz1:/backup ubuntu bash -c "cd /persist && tar xvf /backup/backup.tar --strip 1"
		
		podman run --rm  --volumes-from ubcnt2 -v xyz1:/backup ubuntu bash -c "cd /persist && tar xvf /backup/backup.tar --strip 1"
