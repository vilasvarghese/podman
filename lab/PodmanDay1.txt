Refer putty-ssh

N.B: 
	
Create a podmanhub account 
Create a github account
https://github.com/vilasvarghese/podman-k8s.git		

The independent container platform that enables organizations to seamlessly build, share and run any application, anywhere—from hybrid cloud to the edge.
	- podman
	- Reference: https://www.podman.com/why-podman

Steps to check into git
1. git init
2. git config --global user.email "mymail@mine.com"
3. git config --global user.name "my git user name"
4. git add *
5. git commit -m "my comments"
6. git remote add origin https://github.com/<my username>/<my repo>.git
7. git push -u origin master


Introduction : 
	Introduce myself
	Understand the participants.

Ensure
1. Internet is working
2. All are connected on clear wifi or from home with good broadband speed.
3. Nobody should be connected to vpn or any other proxy.
4. Internet should be working without restrictions.
5. There should not be any firewall installed.

su - ${USER}
id -nG

podman container last only till the program you started in it lasts. It will stop immediately after the program exits.

portainer/portainer can be used to monitor and manage what is happening on the podman

1. podman run hello-world

	Create podmanHub account

2. podman images #podman image ls

	podman run -p 80:80 nginx
	podman ps
	podman stop <id>
	podman ps -a
	podman rm #podman container rm
	podman image ls #podman images
	podman image rm <id>#podman rmi <id>
	
	podman run nginx # stuck
	Ctrl + c
	podman run -d nginx
	podman ps
	podman attach <id>
	
################################################
Important command in podman 

podman
#lists all podman commands
podman <command> --help

################################################
	
	
#################################################
Difference between attach and exec

If we use podman attach, we can use only one instance of shell.
So if we want to open new terminal with new instance of container's shell, we just need to run podman exec

if the podman container was started using /bin/bash command, you can access it using attach, if not then you need to execute the command to create a bash instance inside the container using exec.

Attach isn't for running an extra thing in a container, it's for attaching to the running process.
"podman exec" is specifically for running new things in a already started container, be it a shell or some other process.

While attach is not well named, particularly because of the LXC command lxc-attach (which is more akin podman exec <container> /bin/sh, but LXC specific), it does have a specific purpose of literally attaching you to the process podman started.
Depending on what the process is the behavior may be different, for instance attaching to /bin/bash will give you a shell, but attaching to redis-server will be like you'd just started redis directly without daemonizing.

Vilas : Attach tries to attach to process 1 where as exec executes a new process which you specify.
#################################################	
3. podman image rm <image id> -f

4. podman search ubuntu

5. podman pull ubuntu

6. podman images
	podman inspect image
	
7. podman run ubuntu
	podman ps
	podman ps -a
	podman rm <id>
	

	podman run -it ubuntu bash
	Output
	root@7624b390cb6b:/# 
	#attached mode.
	
	-> apt-get update
	-> apt-get install iputils-ping
	
8. open new terminal 
	podman ps
	podman ps -l
	exit the container
	podman ps #oops gone?
	podman ps -a #no worries i found
	podman start <container id>
	podman exec -it <container id> /bin/sh
	mkdir vilas
	cd vilas
	echo Hello World > first-file.txt
	exit
	podman ps
	
	alternatively we can do
	podman exec -it <first 4/5 char of container id> /bin/sh
	
	podman stop <name>
	podman start <name>
	podman pause <name>
	podman unpuase <name>
	podman restart <name>

10. Let's install some software in this - may be openjdk
	su
	apt-get update
	apt-get install openjdk-8-jdk
	

11. podman commit -m "What you did to the image" -a "Author Name" container_id repository/new_image_name
	e.g - podman commit -m "Ubuntu with Java" -a "Vilas" 7624b390cb6b vilasvarghese/added_java	
	-m is the message and -a is the author.
	
	
		or 
	podman commit <<container id> <<podman hub username>>/<<image name>>
	
	e.g malla
	podman commit -m "what is comming" 23o482o3023 vilasvarghese/abc-xyz
	podman images
		- malla/abc-xyz

	podman images 
	this will show two different images.

12. podman login -u podman-hub-username

13. podman tag <image name or rep name> podman-registry-username/image-name
	or podman tag <image id> podman-hub-username/image-name

14. podman push podman-registry-username/image-name

15. podman ps

16. podman stop <container id>

17. podman start <container id>

18. podman exec -it <container id> /bin/bash
	podman pause <container id>
	podman ps
	-interactive mode is stuck

19. podman container prune -f # will kill only those containers which are not active now.


20. podman container inspect <container id>

Differentiate container and image
	Layers of image (Unified file system - UFS)
	Local image cache
	How it actually stores
	Image inspect
	Save and Load images like regular files.

21. podman image history <image id>

22. podman rm <container id>
	podman rmi  <image id> or podman image rm <image id>

23. podman run --detach --name web nginx:latest
	- Will execute the container in detached mode.
	
24. podman run -it --name web nginx:latest /bin/bash
	cd /var/log/nginx

25. podman exec -it container_id /bin/bash
	podman exec -d container_id
	
26. Execution options in podmansa
	Various run options

	a. -p 
	podman run -d -p 80:80 --name my_image nginx #detached mode.

	b. image:tag
	podman run ubuntu:14.04

	c. image@digest
	podman run alpine@sha256:9cacb71397b640eca97488cf08582ae4e4068513101088e9f96c9814bfda95e0 date

	d. login to a container (interactive tty)
	podman run -it ubuntu /bin/bash

	e. name
	podman run --name my-nginx -d nginx

	f. network
	podman network ls
	podman run --network="host" -it ubuntu /bin/bash

	g. restart if the container exists.
	podman run --restart=always nginx

	h. Run the redis container with a restart policy of on-failure and a maximum restart count of 10. If the redis container exits with a non-zero exit status more than 10 times in a row podman will abort trying to restart the container. 

	podman run --restart=on-failure:10 redis


	i. By default a container’s file system persists even after the container exits. podman to automatically clean up the container and remove the file system when the container exits, you can add the --rm flag:

	podman run --rm=false ubuntu #rm=false - automatically clean up the file system when the container exits.

	Refer https://docs.podman.com/engine/reference/run/ for the complete list.

27. podman image inspect <image id>

28. Moving images without using podmanHub
	You may use this to check in images to git ect.
	
		podman commit -m "message" <container id> mynewimage 
	podman save -o /tmp/mynewimage.tar <image id> 
	check in to git or copy to remote machine
	podman load -i /tmp/mynewimage.tar

	alternatively we can do the following DIRECTLY FROM CONTAINER
	podman export <container id> | gzip > /tmp/xyz.gz
	push to the git repo.
	zcat NAME.gz | podman import - <container name #create the image
	podman run -i -t NAME /bin/bash #create container.

	Difference between podman save, podman export, podman load and podman import.

	podman save will indeed produce a tarball, but with all parent layers, and all tags + versions.

	podman export does also produce a tarball, but without any layer/history.

	It is often used when one wants to "flatten" an image, as illustrated in "Flatten a podman container or image"

	podman export <CONTAINER ID> | podman import - some-image-name:latest
	However, once those tarballs are produced, load/import are there to:

	podman import creates one image from one tarball which is not even an image (just a filesystem you want to import as an image)
	Create an empty filesystem image and import the contents of the tarball

	podman load creates potentially multiple images from a tarred repository (since podman save can save multiple images in a tarball).
	Loads a tarred repository from a file or the standard input stream

30. Resource provisioning
1. Stop and kill all containers
podman stop $(podman ps -a -q) #stop ALL containers
podman rm -f $(podman ps -a -q) # remove ALL containers


2. Run 5 alpine containers reserving 250 MB
	podman container run -d --memory-reservation=750m --name mymem1 ubuntu:latest sleep 3600
	podman container run -d --memory-reservation=750m --name mymem2 ubuntu:latest sleep 3602
	podman container run -d --memory-reservation=750m --name mymem3 ubuntu:latest sleep 3603
	podman container run -d --memory-reservation=750m --name mymem4 ubuntu:latest sleep 3604
	podman container run -d --memory-reservation=750m --name mymem5 ubuntu:latest sleep 3605
	podman container run -d --memory-reservation=750m --name mymem6 ubuntu:latest sleep 3605
	podman container run -d --memory-reservation=750m --name mymem7 ubuntu:latest sleep 3605

	3. Kill all of them and rerun with 1GB
		This works while your machine has only 4GB.

	4. top
	5. podman stats
	6. podman ps -a

	-m  or  --memory= : The maximum amount of memory the container can use. If you set this option, the minimum allowed value is 4m (4 megabyte).
	 --memory-swap : The amount of memory this container is allowed to swap to disk.

	1. podman pull python:3-alpine
	2. podman container run -d --memory=20m --memory-swap=20m --name myPython python:3-alpine sleep 3600

	3. podman exec -it myPython /bin/sh

	We can block the OOM error as follows 
	podman container run -d --oom-kill-disable --memory=20m --memory-swap=30m --name myPython python:3-alpine sleep 3600

	However never use "--oom-kill-disable" because your container might hang.

	--cpu-shares
	Our CPU stress application: time dd if=/dev/urandom bs=1M count=2 | md5sum

	time ... measures elapsed time: shows those 3 timer lines
	dd if=/dev/urandom bs=1M count=2 ... copies bs=blocksize one MB of randomness twice
	md5sum ... calculates md5 security hashes ( give cpu a load )

	1. Create 3 containers with limited cpu


	- podman container run -d --cpu-shares=1024 --name mycpu1024 alpine:3.8 /bin/sh -c 'time dd if=/dev/urandom bs=1M count=100 | md5sum'
	- podman container run -d --cpu-shares=500 --name mycpu500 alpine:3.8 /bin/sh -c 'time dd if=/dev/urandom bs=1M count=100 | md5sum'
	- podman container run -d --cpu-shares=100 --name mycpu100 alpine:3.8 /bin/sh -c 'time dd if=/dev/urandom bs=1M count=100 | md5sum'

	podman logs mycpu1024
	podman logs mycpu500
	podman logs mycpu100


#####################################################
Other helpful commands
#####################################################
Stop all containers
podman stop $(podman ps -a -q) #stop ALL containers

Remove all containers
podman rm -f $(podman ps -a -q) # remove ALL containers

All commandline commands
https://docs.podman.com/engine/reference/commandline/


From CLI 
	find how much CPU and memory is allocated.
	


############################
Advantages of podman?
	- Lightweight footprint and minimal overhead
	- Portability across machines
	- Simplify Deveops practices
	- Speeds up CI
	- Empower microservice architecture
	- Isolation
############################

Additions
############################
Renaming a container
############################
podman run -d --name web nginx
podman rename web web-old

############################
Creating a container
############################
	podman create nginx
############################
Difference between podman create and podman run
############################
podman create creates a container in stoped state.
podman run creates a container in running state.
############################
Writing container id into a file.
Useful if your machine is restarted and you want to debug in the logs
############################
podman create --cidfile /tmp/web1.cid nginx
podman run --cidfile /tmp/web2.cid nginx

cat /tmp/web1.cid


#######################################################


Advantages of podman
--------------------
Containerization is increasingly popular because containers are:

Flexible: Even the most complex applications can be containerized.
Lightweight: Containers leverage and share the host kernel, making them much more efficient in terms of system resources than virtual machines.
Portable: You can build locally, deploy to the cloud, and run anywhere.
Loosely coupled: Containers are highly self sufficient and encapsulated, allowing you to replace or upgrade one without disrupting others.
Scalable: You can increase and automatically distribute container replicas across a datacenter.
Secure: Containers apply aggressive constraints and isolations to processes without any configuration required on the part of the user.


########################################################

Doker 

https://docs.mirantis.com/podman-enterprise/v3.0/podmanee-products/dtr/dtr-user/access-dtr/configure-your-podman-engine.html
